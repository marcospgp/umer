#BlueJ class context
comment0.target=Umer
comment0.text=\r\n\ O\ Umer\ \u00E9\ um\ programa\ que\ permite\ efetuar\ a\ ger\u00EAncia\ de\ viagens\ entre\ clientes\ e\ motoristas.\r\n\ Esta\ \u00E9\ a\ classe\ principal\ que\ gere\ o\ programa.\r\n\r\n\ @author\ Marcos\ Pereira,\ S\u00E9rgio\ Oliveira,\ V\u00EDtor\ Castro\r\n\ @version\ 0.1\r\n\ @since\ 2017-04-23\r\n
comment1.params=
comment1.target=Umer()
comment10.params=
comment10.target=Vehicle\ getNearestReadyVehicle()
comment10.text=\r\n\ Retorna\ o\ ve\u00EDculo\ pronto\ a\ viajar\ mais\ pr\u00F3ximo\ do\ utilizador\r\n\ logado\ atualmente,\ apenas\ se\ o\ utilizador\ for\ um\ cliente.\r\n
comment11.params=taxiID
comment11.target=boolean\ waitingListCar(java.lang.String)
comment12.params=taxiID\ destPosX\ destPosY
comment12.target=void\ startTrip(java.lang.String,\ double,\ double)
comment12.text=\r\n\ Inicia\ uma\ viagem,\ se\ poss\u00EDvel.\ Se\ n\u00E3o\ receber\ um\ taxiID,\ procura\ pelo\ mais\ pr\u00F3ximo.\r\n\ Caso\ receba\ alguma\ taxiID,\ procura\ por\ esse.\ Se\ n\u00E3o\ for\ poss\u00EDvel\ a\ viagem,\ n\u00E3o\ a\ inicia.\r\n\ Pode\ tamb\u00E9m\ adicionar\ na\ waitingList\ de\ certo\ ve\u00EDculo,\ caso\ seja\ poss\u00EDvel.\r\n\ Atualiza\ posi\u00E7\u00F5es\ e\ a\ viagem,\ adiciona\ a\ hist\u00F3ricos\ e\ informa\ ve\u00EDculo\ e\ cliente\ ocupados.\r\n\ @param\ taxiID\ Identificador\ do\ taxi\r\n\ @param\ destPosX\ Coordenada\ x\ de\ destino\ escolhido\r\n\ @param\ destPosY\ Coordenada\ y\ de\ destino\ escolhido\r\n
comment13.params=
comment13.target=java.lang.String[]\ getTripHistory()
comment13.text=\r\n\ Retorna\ a\ lista\ de\ viagens\ do\ utilizador\ logado\r\n\ em\ forma\ de\ Array\ de\ Strings.\r\n
comment14.params=
comment14.target=java.lang.String\ getTop10SpendingClients()
comment15.params=client1\ client2
comment15.target=int\ compare(Client,\ Client)
comment16.params=
comment16.target=java.lang.String\ getTop5LessReliableDrivers()
comment16.text=\r\n\ Retorna\ a\ lista\ de\ condutores\ menos\ fi\u00E1veis,\r\n\ sob\ a\ forma\ de\ String.\r\n
comment17.params=driver1\ driver2
comment17.target=int\ compare(Driver,\ Driver)
comment18.params=seconds
comment18.target=void\ fastForward(double)
comment18.text=\r\n\ Avan\u00E7a\ o\ tempo\ no\ programa.\r\n\ @param\ seconds\tQuantos\ segundos\ devemos\ avan\u00E7ar.\r\n
comment19.params=driverEmail\ rating
comment19.target=void\ rateDriver(java.lang.String,\ double)
comment19.text=\r\n\ Recolhe\ o\ rating\ do\ driver\ em\ rela\u00E7\u00E3o\ \u00E0quele\ servi\u00E7o.\r\n\ @param\ driverEmail\ \tO\ mail\ identificador\ do\ condutor.\r\n\ @param\ rating\ \t\tA\ avalia\u00E7\u00E3o\ dada.\r\n
comment2.params=x\ y\ identifier\ type\ hasWaitingList
comment2.target=Vehicle\ createVehicle(double,\ double,\ java.lang.String,\ java.lang.String,\ boolean)
comment2.text=\r\n\ Cria\ um\ novo\ ve\u00EDculo\r\n\r\n\ @param\ x\ \ \ \ \ \ \ \ \ \tThe\ initial\ x\ position\ of\ the\ vehicle\r\n\ @param\ y\ \ \ \ \ \ \ \ \ \tThe\ initial\ y\ position\ of\ the\ vehicle\r\n\ @param\ identifier\tThe\ vehicle\ identifier\r\n\ @param\ type\ \ \ \ \ \ \tThe\ vehicle\ type\r\n\ @param\ hasWaitingList\ Indicating\ if\ this\ vehicle\ has\ waitingList\r\n\ @return\ Vehicle\ \t\tThe\ new\ vehicle.\r\n
comment20.params=
comment20.target=void\ toggleAvailability()
comment20.text=\r\n\ Disponibiliza\ ou\ n\u00E3o\ um\ condutor\ para\ servi\u00E7o.\r\n
comment21.params=vehicleId
comment21.target=java.lang.String\ getVehicleFinances(java.lang.String)
comment21.text=\r\n\ Devolve\ os\ lucros\ totais\ daquele\ ve\u00EDculo,\ sob\ a\ forma\ de\ String.\r\n\ @param\ vehicleId\ \tIdentificador\ do\ ve\u00EDculo\ a\ pesquisar.\r\n
comment22.params=
comment22.target=java.lang.String[]\ getTripsUnderWay()
comment22.text=\r\n\ Retorna\ a\ lista\ de\ viagens\ a\ decorrer,\r\n\ sob\ a\ forma\ de\ Array\ de\ Strings.\r\n
comment23.params=
comment23.target=java.lang.String[]\ getAllClients()
comment23.text=\r\n\ Retorna\ a\ lista\ de\ clients,\r\n\ sob\ a\ forma\ de\ Array\ de\ Strings.\r\n
comment24.params=
comment24.target=java.lang.String[]\ getAllDrivers()
comment24.text=\r\n\ Retorna\ a\ lista\ de\ condutores,\r\n\ sob\ a\ forma\ de\ Array\ de\ Strings.\r\n
comment25.params=
comment25.target=java.lang.String[]\ getAllVehicles()
comment25.text=\r\n\ Retorna\ a\ lista\ de\ ve\u00EDculos,\r\n\ sob\ a\ forma\ de\ Array\ de\ Strings.\r\n
comment26.params=
comment26.target=java.lang.String\ getTimeNow()
comment26.text=\r\n\ Retorna\ o\ tempo\ agora,\r\n\ sob\ a\ forma\ de\ String.\r\n
comment27.params=
comment27.target=java.lang.String\ getLoggedClientInfo()
comment27.text=\r\n\ Retorna\ informa\u00E7\u00E3o\ completa\ sobre\ o\ cliente\ logado,\r\n\ sob\ a\ forma\ de\ String.\r\n
comment28.params=
comment28.target=java.lang.String[]\ getUnderEvalTrips()
comment28.text=\r\n\ Retorna\ a\ lista\ de\ viagens\ \u00E0\ espera\ de\ avalia\u00E7\u00E3o,\r\n\ sob\ a\ forma\ de\ Array\ de\ Strings.\r\n
comment29.params=
comment29.target=java.lang.String\ getLoggedDriverInfo()
comment29.text=\r\n\ Retorna\ informa\u00E7\u00E3o\ completa\ sobre\ o\ condutor\ logado,\r\n\ sob\ a\ forma\ de\ String.\r\n
comment3.params=email\ name\ password\ address\ birthdate
comment3.target=Driver\ registerDriver(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment3.text=\r\n\ Cria\ um\ novo\ condutor\r\n\r\n\ @param\ email\ \ \ \ \ \ \ \ \ The\ driver's\ account\ email\r\n\ @param\ name\ \ \ \ \ \ \ \ \ \tThe\ driver's\ name\r\n\ @param\ password\t\tThe\ driver's\ account\ password\r\n\ @param\ address\ \ \ \ \ \ \tThe\ driver's\ address\r\n\ @param\ birthdate\ \tThe\ driver's\ birthdate\r\n\ @return\ Driver\ \t\tThe\ new\ driver.\r\n
comment30.params=
comment30.target=boolean\ getLoggedDriverAvailability()
comment30.text=\r\n\ Retorna\ disponibilidade\ do\ condutor,\r\n\ sob\ a\ forma\ de\ boolean.\r\n
comment31.params=
comment31.target=boolean\ userHasUpdates()
comment31.text=\r\n\ Retorna\ true\ caso\ hajam\ updates\ para\ a\ GUI\ e\ false\ caso\ n\u00E3o.\r\n
comment32.params=
comment32.target=void\ userUpdated()
comment33.params=
comment33.target=void\ saveAppState()
comment33.text=\r\n\ Guarda\ os\ dados\ do\ programa.\r\n
comment34.params=
comment34.target=void\ endsTripsUnderway()
comment34.text=\r\n\ Verifica\ se\ viagens\ hora\ de\ chegada\ da\ viagem\ j\u00E1\ passou\ e,\r\n\ caso\ isso\ se\ verifique,\ termina\ a\ viagem,\ adicionando\ \u00E0\ lista\ de\ viagens\ terminadas,\r\n\ tornando\ o\ ve\u00EDculo\ dispon\u00EDvel\ novamente\ e\ retirando\ a\ viagem\ das\ tripsUnderway.\r\n
comment35.params=
comment35.target=void\ startOnWaitingListTrips()
comment35.text=\r\n\ Verifica\ se\ os\ ve\u00EDculos\ com\ nome\ na\ lista\ de\ espera\ t\u00EAm\ condi\u00E7\u00F5es\ para\ iniciar\ viagem\ nova.\r\n\ caso\ isso\ se\ verifique,\ procede\ \u00E0\ cria\u00E7\u00E3o\ da\ viagem.\r\n
comment36.params=taxiID\ clientID\ destPosX\ destPosY
comment36.target=void\ startQueuedTrip(java.lang.String,\ java.lang.String,\ double,\ double)
comment36.text=\r\n\ Retorna\ o\ ve\u00EDculo\ com\ o\ ID\ espec\u00EDfico\ ao\ utilizador\r\n\ logado\ atualmente,\ apenas\ se\ o\ utilizador\ for\ um\ cliente.\r\n
comment37.params=args
comment37.target=void\ main(java.lang.String[])
comment38.params=
comment38.target=void\ run()
comment4.params=email\ name\ password\ address\ birthdate\ posX\ posY
comment4.target=Client\ registerClient(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ double,\ double)
comment4.text=\r\n\ Cria\ um\ novo\ cliente\r\n\r\n\ @param\ email\ \ \ \ \ \ \ \ \ The\ client's\ account\ email\r\n\ @param\ name\ \ \ \ \ \ \ \ \ \tThe\ client's\ name\r\n\ @param\ password\t\tThe\ client's\ account\ password\r\n\ @param\ address\ \ \ \ \ \ \tThe\ client's\ address\r\n\ @param\ birthdate\ \tThe\ client's\ birthdate\r\n\ @param\ x\ \ \ \ \ \ \ \ \ \tThe\ initial\ x\ position\ of\ the\ client\r\n\ @param\ y\ \ \ \ \ \ \ \ \ \tThe\ initial\ y\ position\ of\ the\ client\r\n\ @return\ Client\ \t\tThe\ new\ client.\r\n
comment5.params=driverEmail\ vehicleIdentifier
comment5.target=void\ assignDriverToVehicle(java.lang.String,\ java.lang.String)
comment5.text=\r\n\ Ocupa\ um\ ve\u00EDculo\ com\ um\ dado\ condutor.\r\n\ @param\ driverEmail\ \ \ \ \ \ \ \ \ O\ mail\ do\ condutor.\r\n\ @param\ vehicleIdentifier\ \ \ O\ identificador\ do\ ve\u00EDculo.\r\n
comment6.params=email\ password
comment6.target=java.lang.Boolean\ login(java.lang.String,\ java.lang.String)
comment6.text=\r\n\ Tenta\ fazer\ login\ numa\ conta\ de\ utilizador.\r\n\r\n\ @param\ email\ \ \ O\ email\ do\ utilizador\r\n\ @param\ passord\ A\ password\ do\ utilizador\r\n\ @return\ \ \ \ \ \ \ \ True\ se\ o\ user\ for\ um\ condutor,\ false\ se\ for\ um\ cliente,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ null\ caso\ o\ login\ tenha\ sido\ inv\u00E1lido.\r\n
comment7.params=
comment7.target=boolean\ logout()
comment7.text=\r\n\ Tenta\ fazer\ logout\ de\ um\ utilizador\r\n\r\n\ @return\ \ \ \ \ \ \ \ True\ se\ o\ logout\ foi\ bem\ sucedido,\ caso\ contr\u00E1rio\ \u00E9\ retornado\ false\r\n
comment8.params=taxiID
comment8.target=boolean\ isTaxiAvailable(java.lang.String)
comment8.text=\r\n\ Retorna\ true\ caso\ exista\ o\ veiculo\ com\ aquele\ ID\ e\ esteja\ dispon\u00EDvel.\r\n\ Serve\ de\ guarda\ para\ quando\ chamamos\ certo\ veiculo,\ para\ que\ nao\ seja\r\n\ feito\ o\ pedido\ de\ viagem\ a\ um\ veiculo\ que\ nao\ existe\ ou\ esta\ indisponivel.\r\n\ @param\ taxiID\ O\ identificador\ do\ taxi\ a\ pesquisar.\r\n
comment9.params=
comment9.target=boolean\ isSomeTaxiAvailable()
comment9.text=\r\n\ Retorna\ true\ caso\ exista\ algum\ veiculo\ dispon\u00EDvel.\r\n\ Serve\ de\ guarda\ para\ quando\ chamamos\ qualquer\ veiculo,\ para\ que\ nao\ seja\r\n\ feito\ o\ pedido\ de\ viagem\ a\ um\ veiculo\ que\ nao\ existe\ ou\ esta\ indisponivel.\r\n
numComments=39
